@page "/onestep"
@using System.Net
@using System.Net.Cache
@using System.Text
@using System.Text.Json.Serialization
@using System.Text.Json
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>First Step</PageTitle>

<div class="custom-file" style="overflow: hidden; white-space: nowrap;" id="customFile">
    <InputFile OnChange="OnInputFileChange" class="custom-file-input" id="exampleInputFile" aria-describedby="fileHelp" accept=".txt;.doc;.pdf" ></InputFile>
    <label class="custom-file-label" for="exampleInputFile">
        @InputFileMessage 
    </label>
</div>


@code {
    private UserInfo? userinfo;
    IBrowserFile? File;
    public string InputFileMessage = "Load file...";
    async public void OnInputFileChange(InputFileChangeEventArgs e)
    {
        File=e.File;
        InputFileMessage=e.File.Name;

        using var memoryStream = new MemoryStream();
        await File.OpenReadStream(long.MaxValue).CopyToAsync(memoryStream);
        var smallFileByteArray = memoryStream.ToArray();

        getUserInfo(smallFileByteArray);
    }

    async private void getUserInfo(byte[] smallFileByteArray)
    {
        try
        {
            HttpClient client = new();
            client.BaseAddress = new Uri("http://localhost:5000/getuserinfo");
            HttpRequestMessage req = new();
            req.Method = HttpMethod.Post;
            req.Content = new StringContent(getAsJson(smallFileByteArray), Encoding.UTF8, "application/json");

            HttpResponseMessage resp = new();
            resp = await client.SendAsync(req);
            string resptext = await resp.Content.ReadAsStringAsync();

            InputFileMessage = resptext;
            ChatCompletion responce = (ChatCompletion)JsonSerializer.Deserialize<ChatCompletion>(resptext) ;
            userinfo = new UserInfo(responce.choices[0].message.content);
            InputFileMessage = userinfo.full_name;
        }
        catch (Exception ex)
        {
            /* Error Handling or Logging Code as needed goes here */
            InputFileMessage = ex.Message;
        }
    }
    private string getAsJson(byte[] smallFileByteArray){
        UserResume resume_content = new UserResume( Encoding.UTF8.GetString(smallFileByteArray));
        return JsonSerializer.Serialize<UserResume>(resume_content);
    }
    private class UserResume
    {
        public string resume_content{ get; set; }
        public UserResume(string str){
            resume_content = str;
        } 
    }
    private class UserInfo
    {
        public string? full_name { get; set; }
        public string? email { get; set; }
        public string? phone { get; set; }

        public UserInfo(string temp){
            UserInfo tmp = JsonSerializer.Deserialize<UserInfo>(temp);
            full_name = tmp.full_name;
            email = tmp.email;
            phone = tmp.phone;
        }
    }
    private class ChatCompletion
    {
        public string? id { get; set; }
        public Choice[]? choices { get; set; }
        public int? created { get; set; }
        public string? model { get; set; }
        public string? object_ { get; set; }
        public string? service_tier { get; set; }
        public string? system_fingerprint { get; set; }
        public CompletionUsage? usage { get; set; }
        public Timings? timings { get; set; }
    }
    private class Timings{

    }
    private class CompletionUsage{
        public int? completion_tokens { get; set; }
        public int? prompt_tokens { get; set; }
        public int? total_tokens { get; set; }
        public int? completion_tokens_details { get; set; }
        public int? prompt_tokens_details { get; set; }
    }
    private class Choice{
        public string? finish_reason { get; set; }
        public int? index { get; set; }
        public string? logprobs { get; set; }
        public ChatCompletionMessage? message { get; set; }
    }
    private class ChatCompletionMessage{
        public string? content { get; set; }
        public string? refusal { get; set; }
        public string? role { get; set; }
        public string? annotations { get; set; }
        public string? audio { get; set; }
        public string? function_call { get; set; }
        public string? tool_calls { get; set; }
    }
}   