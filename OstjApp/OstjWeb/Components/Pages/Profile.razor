@page "/profile/{profileId:int?}"
@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Ostj.Shared.Contracts
@attribute [Authorize]
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Profile</PageTitle>

<div class="container vh-100 d-flex justify-content-center align-items-center">
    <EditForm Model="personProfile" FormName="ProfileForm" OnValidSubmit="HandleProfileUpdate">
        <div class="row g-3 w-100">
            <div class="col-6 d-flex alight-items-stretch">
                <div class="card mb-3 w-100">
                    <h5 class="card-header">Account Information</h5>
                    <div class="card-body">
                        <p class="card-text mb-3">Name, @(personInfo?.Name ?? "")</p>
                        <p class="card-text mb-3">Email: @(personInfo?.Email ?? "")</p>
                        <p class="card-text mb-3">Phone: @(personInfo?.Phone ?? "")</p>
                    </div>
                </div>
            </div>
            <div class="col-6 d-flex alight-items-stretch">
                <div class="card mb-3 g-3 w-100">
                    <h5 class="card-header">Desired Positions</h5>
                    <div class="card-body">
                        @for (int i = 0; i < personProfile.JobTitles.Length; i++)
                        {
                            var index = i;
                            <InputText class="form-control mb-3" @bind-Value="personProfile.JobTitles[index]" />
                        }
                    </div>
                </div>
            </div>
            <div class="col-6 d-flex alight-items-stretch">
                <div class="card mb-3 g-3 w-100">
                    <h5 class="card-header">Desired Location</h5>
                    <div class="card-body">
                        <InputText class="form-control mb-3" @bind-Value="personProfile.Location" />
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input mb-3" @bind-Value="personProfile.AcceptRemote" />
                            <label class="form-check-label" for="switchCheckDefault">Agree for Remote</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-6 d-flex alight-items-stretch">
                <div class="card mb-3 g-3 w-100">
                    <h5 class="card-header">Desired Annual Compensation Range in USD</h5>
                    <div class="card-body">
                        <div class="row g-3 align-items-center">
                            <div class="col-sm-3">
                                <label for="salaryMin" class="col-form-label">Minimal</label>
                            </div>
                            <div class="col-auto">
                                <InputNumber id="salaryMin" class="form-control mb-3" aria-placeholder="e.g. 100000"
                                    @bind-Value="personProfile.SalaryMin" />
                            </div>
                        </div>
                        <div class="row g-3 align-items-center">
                            <div class="col-sm-3">
                                <label for="salaryMin" class="col-form-label">Maximum</label>
                            </div>
                            <div class="col-auto">
                                <InputNumber id="salaryMin" class="form-control mb-3" aria-placeholder="e.g. 100000"
                                    @bind-Value="personProfile.SalaryMax" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <button type="submit" class="btn btn-primary mb-3" disabled="@(!context.IsModified())">Update</button>
        </div>
    </EditForm>
</div>


@code
{
    [SupplyParameterFromForm(FormName = "ProfileForm")]
    private PersonProfile personProfile { get; set; } = new()
    {
        JobTitles = new string[3] { "", "", "" },
        AcceptRemote = true,
        Location = "",
        SalaryMin = 0,
        SalaryMax = 0,
        ExtraRequirements = ""
    };

    int personId = 0;

    [Parameter]
    public int? profileId { get; set; }
    PersonInfo? personInfo;

    bool isChanged = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity != null)
        {
            personId = int.Parse(authState.User.FindFirst(ClaimTypes.PrimarySid)?.Value!);
            personInfo = await HttpClient.GetFromJsonAsync<PersonInfo>($"/api/person/{personId}");
            if (personInfo == null)
            {
                Navigation.NavigateTo("/logout");
            }
            else
            {
                int pfId = profileId ?? personInfo.Profiles?.FirstOrDefault()?.Id ?? 0;
                if (pfId == 0)
                {
                    Navigation.NavigateTo("/resume/upload");
                }
                var profile = await HttpClient.GetFromJsonAsync<PersonProfile>($"/api/person/{personId}/profile/{pfId}");
                if (profile == null)
                {
                    throw new InvalidOperationException("Profile not found.");
                }
                else
                {
                    personProfile.Name = profile.Name;
                    personProfile.AcceptRemote = profile.AcceptRemote;
                    personProfile.Location = profile.Location;
                    personProfile.SalaryMin = profile.SalaryMin;
                    personProfile.SalaryMax = profile.SalaryMax;
                    personProfile.ExtraRequirements = profile.ExtraRequirements;
                    for (int i = 0; i < profile.JobTitles.Length && i < personProfile.JobTitles.Length; i++)
                    {
                        personProfile.JobTitles[i] = profile.JobTitles[i];
                    }

                }
            }
        }
    }

    private async Task HandleProfileUpdate(EditContext args)
    {
        await HttpClient.PostAsJsonAsync("/api/person/{personId}/profile/{profileId}/update", personProfile);
    }

    private void JobTitleModified(string value)
    {
        isChanged = true;
    }
}