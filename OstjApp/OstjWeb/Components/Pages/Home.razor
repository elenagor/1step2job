@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@attribute [Authorize]
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

<div class="container vh-100 d-flex justify-content-center align-items-center">
    <div class="row g-5 w-100">
        <div class="col-sm-12 mb-3 mb-sm-0 d-flex alight-items-stretch">
            <div class="card w-100">
                <h5 class="card-header">Let's start form here</h5>
                <div class="card-body">
                    <p class="card-text">Please upload your resume add we will start form here</p>
                    <EditForm Model="@this" OnValidSubmit="HandleFileUpload">
                        <InputFile OnChange="OnInputFileChange" class="form-control mb-3"
                            accept=".pdf,.docx,.doc,.txt" />
                        <button type="submit" class="btn btn-primary w-100"
                            disabled="@(!isFileSelected)">Upload</button>
                    </EditForm>
                    @if (personInfo != null)
                    {
                        <div class="mt-3">
                            <h6>Uploaded File Info:</h6>
                            <p><strong>Name:</strong> @personInfo.Name</p>
                            <p><strong>Email:</strong> @personInfo.Email</p>
                        </div>
                    }
                    @if (processing)
                    {
                        <div class="spinner-border text-primary mt-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    IBrowserFile? selectedFile;
    bool isFileSelected = false;
    PersonInfo? personInfo;
    string? uploadMessage;
    bool processing = false;

    ClaimsPrincipal? ClaimsPrincipalUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipalUser = authState.User;

        if (ClaimsPrincipalUser.Identity != null)
        {
            var useridentity = ClaimsPrincipalUser.Identity.Name;
        }
    }
    
    private class PersonInfo
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Email { get; set; }
    }


    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        isFileSelected = selectedFile != null;
        uploadMessage = null;
    }

    private async Task HandleFileUpload()
    {
        if (selectedFile != null)
        {
            try
            {
                using var content = new MultipartFormDataContent();
                using var stream = selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5); // 5 MB limit
                var fileContent = new StreamContent(stream);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "file", selectedFile.Name);
                processing = true;

                var response = await HttpClient.PostAsync("/api/resume/upload", content);

                if (response.IsSuccessStatusCode)
                {
                    personInfo = await response.Content.ReadFromJsonAsync<PersonInfo>();
                }
                processing = false;
            }
            catch (Exception ex)
            {
                uploadMessage = $"Error: {ex.Message}";
            }
        }
        else
        {
            uploadMessage = "No file selected.";
        }
    }
}