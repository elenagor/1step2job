// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace Ef9.Migrations
{
    [DbContext(typeof(Program.MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Program+JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_job_titles");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_job_titles_profile_id");

                    b.ToTable("job_titles", (string)null);
                });

            modelBuilder.Entity("Program+JobTitleDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(4096)")
                        .HasColumnName("embedding");

                    b.Property<bool>("IsUserDefined")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user_defined");

                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_job_titles");

                    b.ToTable("job_titles", (string)null);
                });

            modelBuilder.Entity("Program+Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<int>("EnrollmentType")
                        .HasColumnType("integer")
                        .HasColumnName("enrollment_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_persons");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("Program+Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PersonId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_profiles_person_id");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Program+ProfileDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("AcceptRemote")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_remote");

                    b.Property<string>("ExtraRequirements")
                        .HasColumnType("text")
                        .HasColumnName("extra_requirements");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PersonId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resume");

                    b.Property<float?>("SalaryMax")
                        .HasColumnType("real")
                        .HasColumnName("salary_max");

                    b.Property<float?>("SalaryMin")
                        .HasColumnType("real")
                        .HasColumnName("salary_min");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Program+JobTitle", b =>
                {
                    b.HasOne("Program+ProfileDetails", null)
                        .WithMany("JobTitles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_titles_profiles_profile_id");
                });

            modelBuilder.Entity("Program+JobTitleDetails", b =>
                {
                    b.HasOne("Program+JobTitle", null)
                        .WithOne("JobTitleDetails")
                        .HasForeignKey("Program+JobTitleDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_titles_job_titles_id");
                });

            modelBuilder.Entity("Program+Profile", b =>
                {
                    b.HasOne("Program+Person", null)
                        .WithMany("Profiles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profiles_persons_person_id");
                });

            modelBuilder.Entity("Program+ProfileDetails", b =>
                {
                    b.HasOne("Program+Profile", null)
                        .WithOne("ProfileDetails")
                        .HasForeignKey("Program+ProfileDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profiles_profiles_id");
                });

            modelBuilder.Entity("Program+JobTitle", b =>
                {
                    b.Navigation("JobTitleDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Program+Person", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Program+Profile", b =>
                {
                    b.Navigation("ProfileDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Program+ProfileDetails", b =>
                {
                    b.Navigation("JobTitles");
                });
#pragma warning restore 612, 618
        }
    }
}
